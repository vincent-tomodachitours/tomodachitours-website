---
description: 
globs: 
alwaysApply: false
---
# Admin Panel Implementation Plan (Option 1B)

## Overview
Create a separate admin panel that shares the same Supabase database while maintaining completely independent deployments and security contexts.

## Architecture
```
tomodachitours/
├── customer/          # Current React app (renamed from src/)
├── admin/             # New admin React app  
├── shared/            # Shared database types, utilities
├── supabase/          # Database config (existing)
└── deployment/        # Vercel configurations
```

**Deployments:**
- Customer: `https://tomodachitours.vercel.app`
- Admin: `https://tomodachitours-admin.vercel.app`

---

## Phase 1: Project Restructuring (Week 1)

### 1.1 Backup and Prepare
- [ ] Create full backup of current project
- [ ] Test current deployment to ensure baseline functionality
- [ ] Document current build process and dependencies

### 1.2 Restructure Project
- [ ] Create new folder structure:
  ```
  mkdir customer admin shared deployment
  ```
- [ ] Move current `src/` contents to `customer/src/`
- [ ] Move current `public/` to `customer/public/`
- [ ] Update `customer/package.json` with relative paths
- [ ] Create `shared/` directory structure:
  ```
  shared/
  ├── types/
  │   ├── database.ts     # Copy from schema.ts
  │   ├── booking.ts      # Booking-related types
  │   └── tour.ts         # Tour-related types
  ├── lib/
  │   ├── supabase.ts     # Shared Supabase client
  │   └── constants.ts    # Shared constants
  └── utils/
      ├── auth.ts         # Auth utilities
      └── validation.ts   # Shared validation
  ```

### 1.3 Update Customer App
- [ ] Update import paths in customer app to use shared types
- [ ] Update customer `package.json` scripts
- [ ] Test customer app functionality locally
- [ ] Verify customer app builds correctly

---

## Phase 2: Admin App Foundation (Week 2)

### 2.1 Initialize Admin App
- [ ] Create React app in `admin/` directory:
  ```bash
  cd admin && npx create-react-app . --template typescript
  ```
- [ ] Install required dependencies:
  ```json
  {
    "@supabase/supabase-js": "^2.39.6",
    "@mui/material": "^5.15.10",
    "react-router-dom": "^6.22.1",
    "tailwindcss": "^3.4.17"
  }
  ```

### 2.2 Set Up Admin Authentication
- [ ] Create admin-specific auth context
- [ ] Implement admin login/logout
- [ ] Create protected route wrapper
- [ ] Set up role-based access control (RBAC)
- [ ] Configure admin user management in Supabase

### 2.3 Admin App Structure
```
admin/src/
├── components/
│   ├── auth/
│   │   ├── LoginForm.tsx
│   │   └── ProtectedRoute.tsx
│   ├── layout/
│   │   ├── AdminLayout.tsx
│   │   ├── Sidebar.tsx
│   │   └── Header.tsx
│   ├── dashboard/
│   │   └── Dashboard.tsx
│   └── ui/
│       ├── Button.tsx
│       ├── Modal.tsx
│       └── Table.tsx
├── pages/
│   ├── Login.tsx
│   ├── Dashboard.tsx
│   ├── Tours.tsx
│   ├── Bookings.tsx
│   └── DiscountCodes.tsx
├── hooks/
│   ├── useAuth.ts
│   └── useSupabase.ts
├── contexts/
│   └── AuthContext.tsx
└── utils/
    ├── api.ts
    └── helpers.ts
```

---

## Phase 3: Admin Features Development (Weeks 3-5)

### 3.1 Dashboard Overview
- [ ] Create main dashboard with key metrics:
  - Total bookings (today, week, month)
  - Revenue statistics
  - Popular tours
  - Recent bookings
- [ ] Implement real-time updates using Supabase subscriptions
- [ ] Add charts/graphs for data visualization

### 3.2 Tour Management
- [ ] Tours listing page with search/filter
- [ ] Create/Edit tour functionality
- [ ] Tour scheduling and availability management
- [ ] Bulk operations (enable/disable tours)
- [ ] Tour analytics and performance metrics

### 3.3 Booking Management
- [ ] Bookings dashboard with advanced filtering:
  - By date range, tour type, status
  - Customer search
  - Payment status
- [ ] Booking details view
- [ ] Booking modification capabilities
- [ ] Cancellation and refund processing
- [ ] Export bookings to CSV/PDF
- [ ] Email notifications for booking changes

### 3.4 Discount Code Management
- [ ] Discount codes listing and search
- [ ] Create/Edit discount codes
- [ ] Usage analytics and reporting
- [ ] Bulk discount code generation
- [ ] Expiration management

### 3.5 Customer Management
- [ ] Customer database view
- [ ] Customer booking history
- [ ] Customer communication tools
- [ ] Customer segmentation for marketing

### 3.6 Reports and Analytics
- [ ] Revenue reports (daily, weekly, monthly)
- [ ] Tour performance analytics
- [ ] Customer acquisition reports
- [ ] Discount code effectiveness
- [ ] Export capabilities

---

## Phase 4: Security Implementation (Week 6)

### 4.1 Database Security
- [ ] Create admin-specific RLS (Row Level Security) policies
- [ ] Set up admin user roles in Supabase
- [ ] Implement API rate limiting for admin endpoints
- [ ] Add audit logging for admin actions

### 4.2 Admin App Security
- [ ] Implement multi-factor authentication (MFA)
- [ ] Session management and timeout
- [ ] IP whitelisting capabilities
- [ ] CSRF protection
- [ ] Secure environment variable handling

### 4.3 API Security
- [ ] Admin-specific API endpoints
- [ ] Request validation and sanitization
- [ ] Error handling and logging
- [ ] API versioning strategy

---

## Phase 5: Deployment Setup (Week 7)

### 5.1 Vercel Configuration
- [ ] Create separate Vercel projects:
  - Customer: Deploy from `customer/` folder
  - Admin: Deploy from `admin/` folder
- [ ] Configure environment variables for each project
- [ ] Set up custom domains/subdomains
- [ ] Configure build settings and deployment hooks

### 5.2 Environment Management
- [ ] Development environment setup
- [ ] Staging environment for testing
- [ ] Production environment configuration
- [ ] Environment-specific configurations

### 5.3 CI/CD Pipeline
- [ ] GitHub Actions for automated testing
- [ ] Automated deployment on merge to main
- [ ] Preview deployments for pull requests
- [ ] Rollback capabilities

---

## Testing Plan

### Phase 1 Testing: Project Restructuring
```markdown
## Customer App Regression Testing
- [ ] All existing pages load correctly
- [ ] Booking flow works end-to-end
- [ ] Payment processing functions
- [ ] Email notifications sent
- [ ] Mobile responsiveness maintained
- [ ] Performance benchmarks met

## Build and Deployment Testing
- [ ] Customer app builds without errors
- [ ] All dependencies resolve correctly
- [ ] Environment variables work
- [ ] Vercel deployment successful
```

### Phase 2 Testing: Admin Foundation
```markdown
## Admin Authentication Testing
- [ ] Admin login/logout functionality
- [ ] Protected routes work correctly
- [ ] Session persistence
- [ ] Invalid credentials handling
- [ ] Password reset functionality

## Admin App Structure Testing
- [ ] All routes navigate correctly
- [ ] Sidebar and navigation work
- [ ] Responsive design on mobile/tablet
- [ ] Error boundaries handle crashes
```

### Phase 3 Testing: Admin Features
```markdown
## Tour Management Testing
- [ ] CRUD operations for tours
- [ ] Data validation and error handling
- [ ] Search and filtering
- [ ] Bulk operations
- [ ] Real-time updates

## Booking Management Testing
- [ ] Booking list loads and filters correctly
- [ ] Booking details view accurate
- [ ] Modification and cancellation flows
- [ ] Email notifications triggered
- [ ] Export functionality works
- [ ] Pagination and sorting

## Discount Code Testing
- [ ] Create/edit/delete discount codes
- [ ] Usage tracking accuracy
- [ ] Expiration handling
- [ ] Bulk generation
- [ ] Validation rules
```

### Phase 4 Testing: Security
```markdown
## Authentication Security Testing
- [ ] Unauthorized access blocked
- [ ] Session timeout works
- [ ] MFA implementation
- [ ] Password strength requirements
- [ ] Account lockout after failed attempts

## Authorization Testing
- [ ] Role-based access control
- [ ] Admin-only endpoints protected
- [ ] Data isolation between customer/admin
- [ ] API rate limiting effective

## Penetration Testing
- [ ] SQL injection prevention
- [ ] XSS protection
- [ ] CSRF token validation
- [ ] Input sanitization
- [ ] Error message sanitization
```

### Phase 5 Testing: Deployment
```markdown
## Deployment Testing
- [ ] Customer app deploys independently
- [ ] Admin app deploys independently
- [ ] Environment variables work in production
- [ ] Database connections stable
- [ ] SSL certificates valid

## Load Testing
- [ ] Admin app performance under load
- [ ] Database query optimization
- [ ] API response times
- [ ] Concurrent user handling

## Integration Testing
- [ ] Admin changes reflect in customer app
- [ ] Database consistency maintained
- [ ] Real-time updates work
- [ ] Cross-browser compatibility
```

### Automated Testing Setup
```markdown
## Unit Testing
- [ ] Set up Jest/Vitest for both apps
- [ ] Component testing with React Testing Library
- [ ] API endpoint testing
- [ ] Utility function testing
- [ ] Database operation testing

## Integration Testing
- [ ] End-to-end testing with Playwright/Cypress
- [ ] Admin workflow testing
- [ ] Customer booking flow testing
- [ ] Cross-app data consistency testing

## Continuous Testing
- [ ] GitHub Actions for automated testing
- [ ] Pre-commit hooks for code quality
- [ ] Automated security scanning
- [ ] Performance monitoring
```

---

## Rollout Strategy

### Development Phase (Weeks 1-7)
- Develop admin panel while customer site remains unchanged
- Use feature flags for gradual admin feature rollout
- Parallel testing of both applications

### Soft Launch (Week 8)
- Deploy admin panel to staging environment
- Limited admin user testing
- Monitor performance and gather feedback
- Fix critical issues

### Production Rollout (Week 9)
- Deploy admin panel to production
- Start using admin panel for daily operations
- Monitor system stability
- Gradual migration of management tasks to admin panel

### Post-Launch (Week 10+)
- Performance optimization
- Additional feature development
- User training and documentation
- Continuous monitoring and improvements

---

## Success Criteria

### Technical Criteria
- [ ] Customer app performance unaffected
- [ ] Admin app response time < 2 seconds
- [ ] 99.9% uptime for both applications
- [ ] Zero data loss or corruption
- [ ] Security tests pass

### Business Criteria
- [ ] Admin operations 50% faster
- [ ] Reduced manual errors in booking management
- [ ] Improved reporting capabilities
- [ ] Better customer service response times
- [ ] Streamlined discount code management

### User Experience Criteria
- [ ] Intuitive admin interface
- [ ] Mobile-friendly admin access
- [ ] Fast search and filtering
- [ ] Reliable real-time updates
- [ ] Clear error messages and help text

---

## Risk Mitigation

### High-Risk Items
1. **Database Migration Risk**
   - Mitigation: Thorough testing in staging environment
   - Rollback: Keep current admin processes as backup

2. **Deployment Complexity**
   - Mitigation: Gradual rollout with feature flags
   - Rollback: Separate deployment allows quick rollback

3. **Security Vulnerabilities**
   - Mitigation: Security testing and code review
   - Rollback: IP restrictions and monitoring

4. **Performance Impact**
   - Mitigation: Load testing and optimization
   - Rollback: Resource monitoring and scaling

### Contingency Plans
- Complete rollback to current system possible at any phase
- Database backups before major changes
- Feature flags for disabling problematic features
- 24/7 monitoring and alerting system

---

## Timeline Summary

| Phase | Duration | Key Deliverables |
|-------|----------|------------------|
| 1 | Week 1 | Project restructured, customer app functional |
| 2 | Week 2 | Admin app foundation with authentication |
| 3 | Weeks 3-5 | Core admin features developed |
| 4 | Week 6 | Security implementation complete |
| 5 | Week 7 | Deployment setup and testing |
| 6 | Week 8 | Soft launch and feedback |
| 7 | Week 9 | Production rollout |
| 8 | Week 10+ | Optimization and enhancements |

**Total Timeline: 8-10 weeks for complete implementation**

---

*This plan ensures zero downtime for the customer website while building a robust, secure admin panel that can eventually replace manual management processes.* 